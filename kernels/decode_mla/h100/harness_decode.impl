
#include <iostream>
#include <string>
#include <fstream>

// constexpr int ATTN_B = 1;
// constexpr int ATTN_H = 1;
// constexpr int ATTN_N = 1024;
// constexpr int ATTN_D = 128; // hardcoded into this kernel
// constexpr int ITER   = 10;

// constexpr int Q_LEN = 1;
// constexpr int L_NEW = 1;

constexpr int ATTN_B = 4;
constexpr int ATTN_R = 0; 
constexpr int ATTN_H = 16; 

constexpr int ATTN_Z  = 576;
constexpr int ATTN_Zc = 512;
constexpr int ATTN_Zr = 64;

constexpr int L = ATTN_B * (ATTN_R + 1); 
constexpr int D = 7168; 

constexpr int ATTN_N = 128;
constexpr int ATTN_K = 128;

constexpr int ATTN_Sl = 128;
constexpr int ATTN_Sh = 129;
constexpr int T       = 32768 / ATTN_K;

constexpr int ITER = 1; 

#define BLOCK_SIZE (32*NUM_WORKERS)

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}


int main(int argc, char **argv) {
    // TODO: consider doing sequential kernel launches to force batches dimension element to execute sequentially,
    // which may increase the probability of L2 cache hits on KV
    std::cout << "Entered main!" << std::endl;

    // queries 
    constexpr int TOTAL_Q_ELEMENTS = L*ATTN_H*ATTN_Z;
    float *q   = new float[TOTAL_Q_ELEMENTS];
    bf16 *q_bf = new bf16[TOTAL_Q_ELEMENTS];

    // latent cache
    constexpr int TOTAL_KV_CACHE_ELEMENTS = ATTN_N*ATTN_K*1*ATTN_Z;
    float *latent_cache   = new float[TOTAL_KV_CACHE_ELEMENTS];
    bf16 *latent_cache_bf = new bf16[TOTAL_KV_CACHE_ELEMENTS];

    // lengths
    constexpr int TOTAL_LENGTHS_ELEMENTS = ATTN_B;
    float *lengths = new float[TOTAL_LENGTHS_ELEMENTS];
    bf16 *lengths_bf = new bf16[TOTAL_LENGTHS_ELEMENTS];

    // table
    constexpr int TOTAL_TABLE_ELEMENTS = ATTN_B*T;
    float *table = new float[TOTAL_TABLE_ELEMENTS];
    bf16 *table_bf = new bf16[TOTAL_TABLE_ELEMENTS];

    // output
    constexpr int TOTAL_OUT_ELEMENTS = L*ATTN_H*ATTN_Zc;
    float *o = new float[TOTAL_OUT_ELEMENTS];
    bf16 *o_bf = new bf16[TOTAL_OUT_ELEMENTS];

    // actual output 
    float *o_actual = new float[TOTAL_OUT_ELEMENTS];

    std::ifstream infile(argv[1]);

    std::cout << "Starting to enter!" << std::endl;

    for(int i = 0; i < TOTAL_Q_ELEMENTS; i++)        infile >> q[i];
    for(int i = 0; i < TOTAL_KV_CACHE_ELEMENTS; i++) infile >> latent_cache[i];
    for(int i = 0; i < TOTAL_LENGTHS_ELEMENTS; i++)  infile >> lengths[i];
    for(int i = 0; i < TOTAL_TABLE_ELEMENTS; i++)    infile >> table[i];
    for(int i = 0; i < TOTAL_OUT_ELEMENTS; i++)      infile >> o_actual[i];

    std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;

    bf16 *d_q, *d_latent_cache, *d_lengths, *d_table, *d_o;
    cudaMalloc(&d_q,            TOTAL_Q_ELEMENTS        * sizeof(bf16));
    cudaMalloc(&d_latent_cache, TOTAL_KV_CACHE_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_lengths,      TOTAL_LENGTHS_ELEMENTS  * sizeof(bf16));
    cudaMalloc(&d_table,        TOTAL_TABLE_ELEMENTS    * sizeof(bf16));
    cudaMalloc(&d_o,            TOTAL_OUT_ELEMENTS      * sizeof(bf16));

    cudaMemcpy(d_q,            q_bf,            TOTAL_Q_ELEMENTS        * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_latent_cache, latent_cache_bf, TOTAL_KV_CACHE_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_lengths,      lengths_bf,      TOTAL_LENGTHS_ELEMENTS  * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_table,        table_bf,        TOTAL_TABLE_ELEMENTS    * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_o,            o_bf,            TOTAL_OUT_ELEMENTS      * sizeof(bf16), cudaMemcpyHostToDevice);  
    
    /**********************************
     * CALL KERNEL
    ********************************* */

    global_layout<ATTN_Zr> Qg(d_q,            ATTN_B, (ATTN_R + 1), ATTN_H, nullptr);
    global_layout<ATTN_Zr> lc(d_latent_cache, ATTN_N, (ATTN_K),     1,      nullptr);
    global_layout<ATTN_Zr> Og(d_o,            ATTN_B, (ATTN_R + 1), ATTN_H, nullptr);

    globals<ATTN_Z> g(Qg, lc, Og, d_lengths, d_table, ATTN_R + 1, ATTN_K, softmax_scale);

    unsigned long mem_size = (kittens::MAX_SHARED_MEMORY); 
    std::cout << "Max shared memory size: " << mem_size << std::endl;
    
    cudaFuncSetAttribute(
        decode_kernel<ATTN_Z>,
        cudaFuncAttributeMaxDynamicSharedMemorySize,
        mem_size
    );

    cudaDeviceSynchronize();
    
    std::cout << "Starting kernel\n";
    dim3 grid(T, ATTN_H, ATTN_B);

    const auto start = std::chrono::high_resolution_clock::now();
    for(int i = 0; i < ITER; i++) {
        decode_kernel<ATTN_Z><<<grid, BLOCK_SIZE, mem_size>>>(g);
    }
    cudaDeviceSynchronize();
    
    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n";

    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
        std::cout << "CUDA error: " << cudaGetErrorString(err) << std::endl;
        return 1;
    }

    /*******************************
     * CORRECTNESS 
    ********************************* */
    
    // check correctness
    cudaMemcpy(o_bf, d_o, TOTAL_OUT_ELEMENTS * sizeof(bf16), cudaMemcpyDeviceToHost);
    for (int i = 0; i < TOTAL_OUT_ELEMENTS; i++) {
        o[i] = __bfloat162float(o_bf[i]);
    }
    // cudaMemcpy(o_bf, d_o, TOTAL_OUT_ELEMENTS * sizeof(bf16), cudaMemcpyDeviceToHost);
    // for(int i = 0; i < TOTAL_OUT_ELEMENTS; i++) {
    //     o[i] = __bfloat162float(o_bf[i]);
    // }

    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");
    for(int i = 0; i < TOTAL_OUT_UNIQUE_ELEMENTS; i++) {
        float diff = o[i] - o_ref[i % TOTAL_OUT_UNIQUE_ELEMENTS];
        o_ref_file << o_ref[i % TOTAL_OUT_UNIQUE_ELEMENTS] << ' ';
        o_file << o[i] << ' ';
        diff_file << diff << ' ';
        if(i % 64 == 63) {
            o_ref_file << '\n';
            o_file << '\n';
            diff_file << '\n';
        }
        if(abs(diff) > 0.01 || isnan(diff)) {
            good = false;
        }
    }

    std::cout << "Average execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER << " us" << std::endl;
    if(good) std::cout << "Correct :)\n";
    else std::cout << "Incorrect :(\n";
    
    // Compute and print average time
    double avg_time_s = (double)(std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count()) / (ITER * 1e6);
    std::cout << "Time: " << avg_time_s << " s" << std::endl;

    cudaFree(d_q);
    cudaFree(d_k_cache);
    cudaFree(d_v_cache);
    cudaFree(d_k_new);
    cudaFree(d_v_new);
    cudaFree(d_k_seqlens);
    cudaFree(d_o);
    delete[] q, k_cache, v_cache, k_new, v_new, k_seqlens, o_ref, o;
    delete[] q_bf, k_cache_bf, v_cache_bf, k_new_bf, v_new_bf, k_seqlens_bf, o_bf;

    return 0;
}