
#include <iostream>
#include <string>
#include <fstream>

constexpr int ATTN_B = 1;
constexpr int ATTN_H = 1;
constexpr int ATTN_N = 1024;
constexpr int ATTN_D = 128; // hardcoded into this kernel
constexpr int ITER   = 10;

constexpr int Q_LEN = 1;
constexpr int L_NEW = 1;

#define BLOCK_SIZE (32*NUM_WORKERS)

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}



int main(int argc, char **argv) {
    // TODO: consider doing sequential kernel launches to force batches dimension element to execute sequentially,
    // which may increase the probability of L2 cache hits on KV

    std::cout << "Entered main!" << std::endl;

    // queries
    constexpr int TOTAL_Q_ELEMENTS = ATTN_B*ATTN_H*Q_LEN*ATTN_D;
    constexpr int TOTAL_Q_UNIQUE_ELEMENTS = ATTN_H*Q_LEN*ATTN_D;
    float *q = new float[TOTAL_Q_UNIQUE_ELEMENTS];
    bf16 *q_bf = new bf16[TOTAL_Q_ELEMENTS];

    // keys and values cahces
    constexpr int TOTAL_KV_CACHE_ELEMENTS = ATTN_B*ATTN_N*ATTN_H*ATTN_D;
    constexpr int TOTAL_KV_CACHE_UNIQUE_ELEMENTS = ATTN_N*ATTN_H*ATTN_D;
    float *k_cache = new float[TOTAL_KV_CACHE_UNIQUE_ELEMENTS];
    float *v_cache = new float[TOTAL_KV_CACHE_UNIQUE_ELEMENTS];
    bf16 *k_cache_bf = new bf16[TOTAL_KV_CACHE_ELEMENTS];
    bf16 *v_cache_bf = new bf16[TOTAL_KV_CACHE_ELEMENTS];

    // keys and values new
    constexpr int TOTAL_KV_NEW_ELEMENTS = ATTN_B*L_NEW*ATTN_H*ATTN_D;
    constexpr int TOTAL_KV_NEW_UNIQUE_ELEMENTS = L_NEW*ATTN_H*ATTN_D;
    float *k_new = new float[TOTAL_KV_NEW_UNIQUE_ELEMENTS];
    float *v_new = new float[TOTAL_KV_NEW_UNIQUE_ELEMENTS];
    bf16 *k_new_bf = new bf16[TOTAL_KV_NEW_ELEMENTS];
    bf16 *v_new_bf = new bf16[TOTAL_KV_NEW_ELEMENTS];

    // keys and values seqlens
    constexpr int TOTAL_KV_SEQLEN_ELEMENTS = ATTN_B;
    float *k_seqlens = new float[TOTAL_KV_SEQLEN_ELEMENTS];
    bf16 *k_seqlens_bf = new bf16[TOTAL_KV_SEQLEN_ELEMENTS];

    // output
    constexpr int TOTAL_OUT_ELEMENTS = ATTN_B*Q_LEN*ATTN_H*ATTN_D;
    constexpr int TOTAL_OUT_UNIQUE_ELEMENTS = Q_LEN*ATTN_H*ATTN_D;
    float *o_ref = new float[TOTAL_OUT_UNIQUE_ELEMENTS];
    bf16 *o_bf = new bf16[TOTAL_OUT_ELEMENTS];

    float *o = new float[TOTAL_OUT_ELEMENTS];

    std::ifstream infile(argv[1]);

    std::cout << "Starting to enter!" << std::endl;

    for(int i = 0; i < TOTAL_Q_UNIQUE_ELEMENTS; i++) infile >> q[i];
    std::cout << "Finished loading Q" << std::endl;
    for(int i = 0; i < TOTAL_KV_CACHE_UNIQUE_ELEMENTS; i++) infile >> k[i];
    std::cout << "Finished loading K CACHE" << std::endl;
    for(int i = 0; i < TOTAL_KV_CACHE_UNIQUE_ELEMENTS; i++) infile >> v[i];
    std::cout << "Finished loading V CACHE" << std::endl;
    for(int i = 0; i < TOTAL_KV_NEW_UNIQUE_ELEMENTS; i++) infile >> k_new[i];
    std::cout << "Finished loading K NEW" << std::endl;
    for(int i = 0; i < TOTAL_KV_NEW_UNIQUE_ELEMENTS; i++) infile >> v_new[i];
    std::cout << "Finished loading V NEW" << std::endl;
    for(int i = 0; i < TOTAL_KV_SEQLEN_ELEMENTS; i++) infile >> k_seqlens[i];
    std::cout << "Finished loading K SEQLENS" << std::endl;
    for(int i = 0; i < TOTAL_OUT_UNIQUE_ELEMENTS; i++) infile >> o_ref[i];
    std::cout << "Finished loading O REF" << std::endl;

    std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;

    // replicate into heads
    for(int i = 0; i < TOTAL_Q_ELEMENTS; i++) {
        q_bf[i] = __float2bfloat16(q[i % TOTAL_Q_UNIQUE_ELEMENTS]);
    }
    for(int i = 0; i < TOTAL_KV_CACHE_ELEMENTS; i++) {
        k_cache_bf[i] = __float2bfloat16(k_cache[i % TOTAL_KV_CACHE_UNIQUE_ELEMENTS]);
        v_cache_bf[i] = __float2bfloat16(v_cache[i % TOTAL_KV_CACHE_UNIQUE_ELEMENTS]);
    }
    for(int i = 0; i < TOTAL_KV_NEW_ELEMENTS; i++) {
        k_new_bf[i] = __float2bfloat16(k_new[i % TOTAL_KV_NEW_UNIQUE_ELEMENTS]);
        v_new_bf[i] = __float2bfloat16(v_new[i % TOTAL_KV_NEW_UNIQUE_ELEMENTS]);
    }
    for(int i = 0; i < TOTAL_KV_SEQLEN_ELEMENTS; i++) {
        k_seqlens_bf[i] = __float2bfloat16(k_seqlens[i]);
    }

    bf16 *d_q, *d_k_cache, *d_v_cache, *d_k_new, *d_v_new, *d_k_seqlens, *d_o;
    cudaMalloc(&d_q, TOTAL_Q_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_k_cache, TOTAL_KV_CACHE_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_v_cache, TOTAL_KV_CACHE_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_k_new, TOTAL_KV_NEW_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_v_new, TOTAL_KV_NEW_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_k_seqlens, TOTAL_KV_SEQLEN_ELEMENTS * sizeof(bf16));
    cudaMalloc(&d_o, TOTAL_OUT_ELEMENTS * sizeof(bf16));

    cudaMemcpy(d_q, q_bf, TOTAL_Q_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_k_cache, k_cache_bf, TOTAL_KV_CACHE_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_v_cache, v_cache_bf, TOTAL_KV_CACHE_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_k_new, k_new_bf, TOTAL_KV_NEW_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_v_new, v_new_bf, TOTAL_KV_NEW_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_k_seqlens, k_seqlens_bf, TOTAL_KV_SEQLEN_ELEMENTS * sizeof(bf16), cudaMemcpyHostToDevice);
    
    /**********************************
     * CALL KERNEL
    ********************************* */

    // global_layout<ATTN_D> Qg(d_q, ATTN_B, ATTN_N, ATTN_H, nullptr);
    // global_layout<ATTN_D> Kg(d_k, ATTN_B, ATTN_N, ATTN_H, nullptr);
    // global_layout<ATTN_D> Vg(d_v, ATTN_B, ATTN_N, ATTN_H, nullptr);
    // global_layout<ATTN_D> Og(d_o, ATTN_B, ATTN_N, ATTN_H, nullptr);
    // globals<ATTN_D> g(Qg, Kg, Vg, Og);

    global_layout<ATTN_D> Qg(d_q, ATTN_B, ATTN_H, ATTN_N, nullptr);
    global_layout<ATTN_D> Kg(d_k, ATTN_B, ATTN_H, ATTN_N, nullptr);
    global_layout<ATTN_D> Vg(d_v, ATTN_B, ATTN_H, ATTN_N, nullptr);
    global_layout<ATTN_D> Og(d_o, ATTN_B, ATTN_H, ATTN_N, nullptr);
    globals<ATTN_D> g(Qg, Kg, Vg, Og);
    
    unsigned long mem_size = (kittens::MAX_SHARED_MEMORY-1000) / 2; // have the flag tell us
    std::cout << "Max shared memory size: " << mem_size << std::endl;
    
    cudaFuncSetAttribute(
        attend_ker<ATTN_D>,
        cudaFuncAttributeMaxDynamicSharedMemorySize,
        mem_size
    );

    cudaDeviceSynchronize();
    std::cout << "Starting kernel\n";
    dim3 grid((ATTN_N + qkvo_tile<ATTN_D>::rows*NUM_WORKERS - 1) / (qkvo_tile<ATTN_D>::rows*NUM_WORKERS), ATTN_H, ATTN_B);
    std::cout << "Grid size: " << grid.x << " x " << grid.y << " x " << grid.z << std::endl;
    const auto start = std::chrono::high_resolution_clock::now();
    for(int i = 0; i < ITER; i++) {
        attend_ker<ATTN_D><<<grid, BLOCK_SIZE, mem_size>>>(g);
    }
    cudaDeviceSynchronize();
    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n";

    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
        std::cout << "CUDA error: " << cudaGetErrorString(err) << std::endl;
        return 1;
    }


    /*******************************
     * CORRECTNESS 
    ********************************* */
    
    // check correctness
    cudaMemcpy(o_bf, d_o, TOTAL_OUT_ELEMENTS * sizeof(bf16), cudaMemcpyDeviceToHost);
    for(int i = 0; i < TOTAL_OUT_UNIQUE_ELEMENTS; i++) {
        o[i] = __bfloat162float(o_bf[i]);
    }

    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");
    for(int i = 0; i < TOTAL_OUT_UNIQUE_ELEMENTS; i++) {
        float diff = o[i] - o_ref[i % TOTAL_OUT_UNIQUE_ELEMENTS];
        o_ref_file << o_ref[i % TOTAL_OUT_UNIQUE_ELEMENTS] << ' ';
        o_file << o[i] << ' ';
        diff_file << diff << ' ';
        if(i % 64 == 63) {
            o_ref_file << '\n';
            o_file << '\n';
            diff_file << '\n';
        }
        if(abs(diff) > 0.01 || isnan(diff)) {
            good = false;
        }
    }

    std::cout << "Average execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER << " us" << std::endl;
    if(good) std::cout << "Correct :)\n";
    else std::cout << "Incorrect :(\n";
    
    // Compute and print average time
    double avg_time_s = (double)(std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count()) / (ITER * 1e6);
    std::cout << "Time: " << avg_time_s << " s" << std::endl;

    cudaFree(d_q);
    cudaFree(d_k_cache);
    cudaFree(d_v_cache);
    cudaFree(d_k_new);
    cudaFree(d_v_new);
    cudaFree(d_k_seqlens);
    cudaFree(d_o);
    delete[] q, k_cache, v_cache, k_new, v_new, k_seqlens, o_ref, o;
    delete[] q_bf, k_cache_bf, v_cache_bf, k_new_bf, v_new_bf, k_seqlens_bf, o_bf;

    return 0;
}